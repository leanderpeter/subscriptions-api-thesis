name: Deployment-CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    container: node:14-alpine3.16
    services:
      postgres:
        image: postgres:12.6-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      LOCAL_DATABASE_URL: "postgres://postgres:password@postgres:5432"
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14
    - name: Install dependencies
      run: yarn install --ignore-scripts
    - name: Lint
      run: yarn lint
    - name: Test
      run: yarn test-ci
    - name: Collect test results
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: junit.xml, coverage/cobertura-coverage.xml

  deploy-dev:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14
    - name: Install dependencies
      run: yarn install --ignore-scripts
    - name: Deploy
      run: |
        VERSION=$(git rev-parse --short HEAD)
        echo "Deploying version ${VERSION}"
        npx sls create_domain --stage development --verbose
        npx sls deploy --stage development --verbose

  deploy-staging:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/${CI_DEFAULT_BRANCH}'
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14
    - name: Install dependencies
      run: yarn install --ignore-scripts
    - name: Deploy
      run: |
        VERSION=$(git rev-parse --short HEAD)
        echo "Deploying version ${VERSION}"
        npx sls create_domain --stage staging --verbose
        npx sls deploy --stage staging --verbose

  deploy-production:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14
    - name: Install dependencies
      run: yarn install --ignore-scripts
    - name: Deploy
      run: |
        VERSION=$(git rev-parse --short HEAD)
        echo "Deploying version ${VERSION}"
        npx sls create_domain --stage production --verbose
        npx sls deploy --stage production --verbose
  db-migrate-dev:
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.event_name == 'pull_request'
    steps:
    - name: Migrate
      run: aws lambda invoke --region eu-central-1 --function-name subscriptions-development-db-migrate response.json
  db-migrate-staging:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/${CI_DEFAULT_BRANCH}'
    steps:
    - name: Migrate
      run: aws lambda invoke --region eu-central-1 --function-name subscriptions-staging-db-migrate response.json
  db-migrate-production:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Migrate
      run: aws lambda invoke --region eu-central-1 --function-name subscriptions-production-db-migrate response.json
